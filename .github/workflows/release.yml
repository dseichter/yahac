name: Build Binaries

on:
    push:
      tags:
        - 'v*'

jobs:

  build-windows:
      runs-on: windows-latest
      steps:

          - name: 'Checkout'
            uses: actions/checkout@v5

          - name: Set up Python
            uses: actions/setup-python@v6
            with:
              python-version: 3.13

          - name: Create and start virtual environment
            run: python3 -m venv venv

          - name: Install dependencies
            run: |
              pip install -r src/requirements.txt
              pip install pyinstaller-versionfile
              
          - name: Update version info
            run: |
              $VERSION = "${{ github.ref_name }}" -replace '^v', ''
              $NUMERIC_VERSION = $VERSION -replace '[^0-9.]', ''
              $VERSION_PARTS = ($NUMERIC_VERSION -split '\.') + @('0', '0', '0', '0')
              $VERSION_PARTS = $VERSION_PARTS[0..3] | ForEach-Object { if ($_ -eq '') { '0' } else { $_ } }
              (Get-Content version_info.py) -replace 'filevers=\(0, 3, 0, 0\)', "filevers=($($VERSION_PARTS[0]), $($VERSION_PARTS[1]), $($VERSION_PARTS[2]), $($VERSION_PARTS[3]))" -replace 'prodvers=\(0, 3, 0, 0\)', "prodvers=($($VERSION_PARTS[0]), $($VERSION_PARTS[1]), $($VERSION_PARTS[2]), $($VERSION_PARTS[3]))" -replace "u'FileVersion', u'0.3.0.0'", "u'FileVersion', u'$NUMERIC_VERSION.0'" -replace "u'ProductVersion', u'0.3.0.0'", "u'ProductVersion', u'$NUMERIC_VERSION.0'" | Set-Content version_info.py
            shell: powershell
            
          - name: Build Windows binary
            run: pyinstaller --onefile --copy-metadata ha_mqtt_discoverable --strip --exclude-module tkinter --exclude-module matplotlib --exclude-module numpy -w src/yahac.py -n yahac-${{ github.ref_name }}.exe --icon=icons/yahac.ico --version-file=version_info.py --add-data "README.md;." --add-data "LICENSE;."

          - name: Upload artifact
            uses: actions/upload-artifact@v4
            with:
                  name: yahac-${{ github.ref_name }}.exe
                  path: dist/yahac-${{ github.ref_name }}.exe   

  build-linux:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          include:
            - container: ubuntu:24.04
              name: ubuntu-24-04
              install_cmd: "apt update && apt-get install build-essential libgtk-3-dev python3-venv python3-pip wget xz-utils -y"
            - container: archlinux:latest
              name: archlinux
              install_cmd: "pacman -Syu --noconfirm && pacman -S --noconfirm base-devel gtk3 python-virtualenv python-pip wget xz"
      container:
        image: ${{ matrix.container }}
      steps:

          - name: 'Checkout'
            uses: actions/checkout@v5

          - name: Install dependencies
            run: ${{ matrix.install_cmd }}

          - name: Set up Python
            uses: actions/setup-python@v6
            with:
              python-version: 3.13

          - name: Create and start virtual environment
            run: |
              python3 -m venv venv
              . venv/bin/activate

          - name: Install dependencies
            run: |
              . venv/bin/activate
              pip install -r src/requirements.txt

          - name: Build Linux binary
            run: |
              . venv/bin/activate
              pyinstaller --onefile --copy-metadata ha_mqtt_discoverable --strip --exclude-module tkinter --exclude-module matplotlib --exclude-module numpy src/yahac.py -n yahac-${{ matrix.name }}-${{ github.ref_name }}

          - name: Upload artifact
            uses: actions/upload-artifact@v4
            with:
              name: yahac-${{ matrix.name }}-${{ github.ref_name }}
              path: dist/yahac-${{ matrix.name }}-${{ github.ref_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    steps:
        - name: Trigger Debian package build
          uses: actions/github-script@v8
          with:
            script: |
              github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'debian.yml',
                ref: context.ref
              })
              
        - name: Trigger Arch package build
          uses: actions/github-script@v8
          with:
            script: |
              github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'arch.yml',
                ref: context.ref
              })
              
        - uses: actions/download-artifact@v6
          with:
            name: yahac-ubuntu-24-04-${{ github.ref_name }}

        - uses: actions/download-artifact@v6
          with:
            name: yahac-${{ github.ref_name }}.exe

        - uses: actions/download-artifact@v6
          with:
            name: yahac-archlinux-${{ github.ref_name }}

        - name: Create Release
          id: create_release
          uses: softprops/action-gh-release@v2
          with:
            tag_name: ${{ github.ref_name }}
            name: Release ${{ github.ref_name }}
            draft: false
            prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') }}
            generate_release_notes: true
            files: |
              yahac-ubuntu-24-04-${{ github.ref_name }}
              yahac-archlinux-${{ github.ref_name }}
              yahac-${{ github.ref_name }}.exe

